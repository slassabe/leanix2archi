#!/usr/bin/env python
# coding: utf-8

'''
 Purpose :
   Dump LeanIx and convert output in various file format
   - Convert Model in Archi file format : OEF (Open Exchange File)
'''

import xml.etree.ElementTree as ET
from xml.dom import minidom
from leanIXConverterModels import Model, Writer
from customLog import get_default_logger

__author__ = "Serge LASSABE"
__copyright__ = "Copyright (C) 2023, Serge LASSABE"
__license__ = "agpl-3.0"
__version__ = "5.0.1"

class XmlArchiWriter(Writer):
    ID1 = 'id-autogenerated-DIAGRAM01'
    ID2 = 'id-autogenerated-LABEL01'
    IDENTIFIER_KEY =    'identifier'
    IDENTIFIER_REF_KEY = 'identifierRef'
    NAME_KEY =          'name'
    SOURCE_KEY =        'source'
    TARGET_KEY =        'target'
    DOC_KEY =           'documentation'
    TYPE_KEY =          'xsi:type'
    LANG_ATTR =         {'xml:lang': "fr"}

    def tostring(self, notes):
        # Use it and pray
        ATTR = {'xmlns': "http://www.opengroup.org/xsd/archimate/3.0/",
                'xmlns:xsi': "http://www.w3.org/2001/XMLSchema-instance",
                'xsi:schemaLocation': "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Diagram.xsd",
                'identifier': "id-110f4dff-c3c9-437c-91aa-ffe7df582fe6"}
        root = ET.Element('model', attrib=ATTR)
        root.append(ET.Comment("Autogenerated Archi file"))
        name = ET.SubElement(root, self.NAME_KEY, self.LANG_ATTR)
        name.text="Export LeanIX Content"

        # First : format application components
        elements_xml = ET.SubElement(root, 'elements')
        for elt in self.model.get_elt_values():
            archi_elt = ArchiElement(self.model, elt)
            archi_elt.to_xml(elements_xml)
        # Add relationships
        relationships_xml = ET.SubElement(root, 'relationships')
        for rel in self.model.get_rel_values():
            archi_rel = ArchiRelationship(self.model, rel)
            archi_rel.to_xml(relationships_xml)
        ArchiOrganizations(self.model).to_xml(root)
        self.add_propertyDefinitions_xml(root)
        ArchiViews(self.model, notes).to_xml(root)
        tmp = ET.tostring(root, encoding="unicode")

        ## Emergency mode : replace this fucking 0x0b char
        tmp = tmp.replace('', '@')
        return minidom.parseString(tmp).toprettyxml(indent="   ")

    def add_propertyDefinitions_xml(self, to):
        propertyDefinitions_xml = ET.SubElement(to, 'propertyDefinitions')
        propertyDefinition_xml = ET.SubElement(propertyDefinitions_xml, 'propertyDefinition', attrib={'identifier': "propid-1", 'type': "string"})
        name_xml = ET.SubElement(propertyDefinition_xml, 'name')
        name_xml.text = 'LEANIX.ID'
        propertyDefinition_xml = ET.SubElement(propertyDefinitions_xml, 'propertyDefinition', attrib={'identifier': "propid-2", 'type': "string"})
        name_xml = ET.SubElement(propertyDefinition_xml, 'name')
        name_xml.text = 'LEANIX.NAME'
        propertyDefinition_xml = ET.SubElement(propertyDefinitions_xml, 'propertyDefinition', attrib={'identifier': "propid-3", 'type': "string"})
        name_xml = ET.SubElement(propertyDefinition_xml, 'name')
        name_xml.text = 'LEANIX.SOURCE'
        propertyDefinition_xml = ET.SubElement(propertyDefinitions_xml, 'propertyDefinition', attrib={'identifier': "propid-4", 'type': "string"})
        name_xml = ET.SubElement(propertyDefinition_xml, 'name')
        name_xml.text = 'LEANIX.TARGET'
        ## Manage tag properties
        for tag in self.model.tags_refs:
            propertyDefinition_xml = ET.SubElement(propertyDefinitions_xml, 'propertyDefinition', attrib={'identifier': self.model.tags_refs[tag], 'type': "string"})
            name_xml = ET.SubElement(propertyDefinition_xml, 'name')
            name_xml.text = tag


    def dump(self, output_name, notes):
        with open(output_name, 'w', encoding='utf-8') as output:
            xml_model = self.tostring(notes)
            output.write(xml_model)

    ## Convenient function used to format XML
    def add_properties_xml(self, to):
        # Return the 'properties' XML node created
        properties_xml = ET.SubElement(to, 'properties')
        property_xml = ET.SubElement(properties_xml, 'property', attrib={'propertyDefinitionRef': 'propid-1'})
        value_xml = ET.SubElement(property_xml, 'value', self.LANG_ATTR)
        value_xml.text = self.leanix_id
        property_xml = ET.SubElement(properties_xml, 'property', attrib={'propertyDefinitionRef': 'propid-2'})
        value_xml = ET.SubElement(property_xml, 'value', self.LANG_ATTR)
        value_xml.text = self.leanix_name
        # Property tags
        for tag in self.tags:
            property_xml = ET.SubElement(properties_xml, 'property', attrib={'propertyDefinitionRef': self.model.tags_refs[tag]})
            value_xml = ET.SubElement(property_xml, 'value', self.LANG_ATTR)
            value_xml.text = self.tags[tag]

        return properties_xml

    def normalize(self, id_LeanIX):
            return f"id-{id_LeanIX}"

class ArchiElement(XmlArchiWriter):
    def __init__(self, model, elt):
        LEAN2ARCHI = {'Application':    'ApplicationComponent',
                      'Project':        'WorkPackage',
                      'Process':        'BusinessProcess',
                      'DataObject':     'DataObject',
                      'ITComponent':    'SystemSoftware',
                      'Interface':      'ApplicationInterface',
                      'TechnicalStack': 'TechnologyService',
                      'BusinessCapability': 'Capability',
                      'UserGroup':      'Stakeholder'
                      }

        super().__init__(model)
        self.leanix_id = elt.leanix_id
        self.leanix_type = elt.leanix_type
        self.leanix_name = elt.leanix_name
        self.doc = elt.doc
        self.tags = elt.tags

        self.archi_id = self.normalize(elt.leanix_id)
        self.archi_type = LEAN2ARCHI[elt.leanix_type]

    def __str__(self):
        return "ArchiElement(id = {}, type = {}, name = {}, doc = {})".format(self.leanix_id, self.leanix_type, self.leanix_name, self.doc)

    def to_xml(self, attached_to):
        element_xml = ET.SubElement(attached_to, 'element', attrib={self.IDENTIFIER_KEY: self.archi_id,
                                                                    self.TYPE_KEY: self.archi_type})
        name_xml = ET.SubElement(element_xml, self.NAME_KEY, self.LANG_ATTR)
        name_xml.text = self.leanix_name

        if self.doc:
            doc_xml = ET.SubElement(element_xml, self.DOC_KEY, self.LANG_ATTR)
            doc_xml.text = self.doc

        # Add properties
        self.add_properties_xml(element_xml)

class ArchiRelationship(XmlArchiWriter):
    def __init__(self, model, elt):
        super().__init__(model)
        self.leanix_id = elt.leanix_id

        self.leanix_name = elt.leanix_name
        self.leanix_source = elt.leanix_source
        self.leanix_target = elt.leanix_target
        self.doc = elt.doc
        self.tags = elt.tags

        self.archi_id = self.normalize(elt.leanix_id)
        self.archi_type = elt.type
        try:
            self.archi_name = self.model.interface_name_beautifier(self.leanix_name)
        except AttributeError:
            self.logger.error(f'leanix_id: {self.leanix_id} - archi_type: {self.archi_type} - leanix_name: {self.leanix_name} - leanix_source: {self.leanix_source} - leanix_target: {self.leanix_target}')
            self.archi_name = 'undef'
        self.archi_source = self.normalize(elt.leanix_source)
        self.archi_target = self.normalize(elt.leanix_target)

    def __str__(self):
        return f"ArchiRelationship(id = {self.leanix_id}, type = {self.archi_type}, name = {self.leanix_name}, from = {self.archi_source}, to = {self.archi_target}, doc = {self.doc})"

    def add_properties_xml(self, to):
        properties_xml = super().add_properties_xml(to)
        if self.leanix_source:
            property_xml = ET.SubElement(properties_xml, 'property', attrib={'propertyDefinitionRef': 'propid-3'})
            value_xml = ET.SubElement(property_xml, 'value', self.LANG_ATTR)
            value_xml.text = self.leanix_source
        if self.leanix_target:
            property_xml = ET.SubElement(properties_xml, 'property', attrib={'propertyDefinitionRef': 'propid-4'})
            value_xml = ET.SubElement(property_xml, 'value', self.LANG_ATTR)
            value_xml.text = self.leanix_target

    def to_xml(self, attached_to):
        relationship_xml = ET.SubElement(attached_to, 'relationship', attrib={self.IDENTIFIER_KEY:   self.archi_id,
                                                                              self.SOURCE_KEY:       self.archi_source,
                                                                              self.TARGET_KEY:       self.archi_target,
                                                                              self.TYPE_KEY:         self.archi_type})
        # The relashionship label is very (too ?) long...
        # so try to extract data information and save all stuff in the documentation
        if len(self.archi_name) > 1:
            name_xml = ET.SubElement(relationship_xml, self.NAME_KEY, self.LANG_ATTR)
            name_xml.text = self.archi_name

        if self.doc:
            doc_xml = ET.SubElement(relationship_xml, self.DOC_KEY, self.LANG_ATTR)
            doc_xml.text = self.doc

        # Add properties
        self.add_properties_xml(relationship_xml)

class ArchiOrganizations(XmlArchiWriter):
    def __init__(self, model):
        super().__init__(model)
        return

    def to_xml(self, attached_to):
        orga_xml_l1 = ET.SubElement(attached_to, 'organizations')
        orga_xml_l1a = ET.SubElement(orga_xml_l1, 'item')
        orga_xml_l1aa = ET.SubElement(orga_xml_l1a, 'label', attrib=self.LANG_ATTR)
        orga_xml_l1aa.text = 'Views'
        orga_xml_l1ab = ET.SubElement(orga_xml_l1a, 'item', attrib={self.IDENTIFIER_REF_KEY: self.ID1})

class ArchiViews(XmlArchiWriter):
    def __init__(self, model, release_notes):
        super().__init__(model)
        self.content = release_notes

    def to_xml(self, attached_to):
        orga_xml_l2 = ET.SubElement(attached_to, 'views')
        orga_xml_l2a = ET.SubElement(orga_xml_l2, 'diagrams')
        orga_xml_l2aa = ET.SubElement(orga_xml_l2a, 'view', attrib={self.IDENTIFIER_KEY: self.ID1,
                                                                    self.TYPE_KEY: "Diagram"})
        orga_xml_l2aaa = ET.SubElement(orga_xml_l2aa, 'name', attrib=self.LANG_ATTR)
        orga_xml_l2aaa.text = 'Release Notes'
        orga_xml_l2aab = ET.SubElement(orga_xml_l2aa, 'node', attrib={self.IDENTIFIER_KEY: self.ID2,
                                                                      self.TYPE_KEY: "Label",
                                                                      'x': "50", 'y': "40", 'w': "700", 'h': "900"})
        orga_xml_l2aaba = ET.SubElement(orga_xml_l2aab, 'label', attrib=self.LANG_ATTR)
        orga_xml_l2aaba.text = self.content
        orga_xml_l2aabb = ET.SubElement(orga_xml_l2aab, 'style')
        orga_xml_l2aabba = ET.SubElement(orga_xml_l2aabb, 'fillColor', attrib={'r': "255", 'g': "212", 'b': "120", 'a': "100"})
        orga_xml_l2aabbb = ET.SubElement(orga_xml_l2aabb, 'lineColor', attrib={'r': "92", 'g': "92", 'b': "92", 'a': "100"})
        orga_xml_l2aabbc = ET.SubElement(orga_xml_l2aabb, 'font', attrib={'name': 'Courrier', 'size': '10'})
